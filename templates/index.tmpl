<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" /><link rel="stylesheet" href="/static/main.css" type="text/css" />
<link rel="icon" type="image/png" sizes="32x32" href="/static/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/static/favicon-16x16.png">
<link rel="apple-touch-icon" sizes="180x180" href="/static/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="192x192" href="/static/favicon-192x192.png">
<title>atomstr</title></head><body>
<div id="title"><h1><img src="/static/atomstr-logo.png" alt="atomstr logo" class="logo"><a class="title" href="/">atomstr</a></h1><div id="main-links"><a href="#" id="statsLink">☰ Statistics</a></div></div>
<p>RSS/Atom gateway to Nostr.</p>

<p>Add at least one of the following relays to read the feeds:
<ul>
{{range .Relays}}
	<li>{{.}}</li>
{{end}}
</ul>
</p>
<br />

<h2>Search or add a feed</h2>
<form class="addfeed" id="addFeedForm" action="/add" method="POST">
<div class="addfeed-input-row">
<input class="input search-input" id="feedUrl" name="url" type="url" placeholder="Search feeds or add new URL..." required>
<input type="submit" id="addFeedBtn" value="Add Feed" style="display: none;">
</div>
<div id="searchResults" class="search-results"></div>
</form>

<br />
<h2>Current feeds</h2>
<table>
	<tbody>
	<th>URL</th>
	<th class="opener">Open in</th>
	{{range .Feeds}}
		<tr class="feed-{{.State}}">
			<td>
				{{.URL}}
				{{if eq .State "broken"}}
					<span class="feed-state-indicator state-broken">✗ Broken ({{.FailureCount}} failures)</span>
				{{else if gt .FailureCount 0}}
					<span class="feed-state-indicator state-warning">⚠ {{.FailureCount}} failures</span>
				{{else}}
					<span class="feed-state-indicator state-active">✓ Active</span>
				{{end}}
			</td>
			<td>
				<a href="https://snort.social/p/{{.Npub}}">Snort</a>
				<a href="https://nostrudel.ninja/#/u/{{.Npub}}">noStrudel</a>
				<a href="https://primal.net/profile/{{.Npub}}">Primal</a>
				<a href="nostr:{{.Npub}}">Native</a>
			</td>

		</tr>
	{{end}}
	</tbody>
</table>
<br />
<br />
<div id="footer">atomstr {{.Version}} &bullet; Released under GPL &bullet; <a href="https://github.com/psic4t/atomstr">Code on Github</a> &bullet; CC by-nc-nd psic4t<br>
</div>

<!-- Spinner/Lightbox Overlay -->
<div id="overlay" class="overlay">
	<div class="spinner-container">
		<div class="spinner"></div>
		<div class="spinner-text">Adding feed...</div>
		<div class="spinner-status" id="spinnerStatus">Validating feed URL</div>
		<div id="errorMessage" class="error-message" style="display: none;"></div>
	</div>
</div>

<!-- Statistics Modal -->
<div id="statsModal" class="overlay">
	<div class="stats-container">
		<div class="stats-header">
			<h3>☰ Feed Statistics</h3>
			<button class="close-btn" id="closeStatsModal">&times;</button>
		</div>
		<div class="stats-content">
			<div class="stat-item">
				<div class="stat-number" id="totalFeeds">-</div>
				<div class="stat-label">Total Feeds</div>
			</div>
			<div class="stat-item">
				<div class="stat-number" id="failingFeeds">-</div>
				<div class="stat-label">Failing Feeds</div>
			</div>
			<div class="stat-item">
				<div class="stat-number" id="brokenFeeds">-</div>
				<div class="stat-label">Broken Feeds</div>
			</div>
		</div>

	</div>
</div>

<script>
// Store all feeds data for search functionality
const allFeeds = [
{{range .Feeds}}
	{url: "{{.URL}}", state: "{{.State}}", npub: "{{.Npub}}"},
{{end}}
];

// Search functionality
document.getElementById('feedUrl').addEventListener('input', function(e) {
	const searchTerm = e.target.value.trim().toLowerCase();
	const addFeedBtn = document.getElementById('addFeedBtn');
	const searchResults = document.getElementById('searchResults');
	const feedRows = document.querySelectorAll('tr.feed-active, tr.feed-broken');
	
	if (searchTerm === '') {
		// Show all feeds, hide add button
		feedRows.forEach(row => row.style.display = '');
		addFeedBtn.style.display = 'none';
		document.getElementById('addFeedForm').classList.remove('with-button');
		searchResults.innerHTML = '';
		return;
	}
	
	let hasMatches = false;
	const matchingFeeds = [];
	
	// Filter feeds based on search term
	feedRows.forEach((row, index) => {
		const feedUrl = allFeeds[index]?.url || '';
		if (feedUrl.toLowerCase().includes(searchTerm)) {
			row.style.display = '';
			hasMatches = true;
			matchingFeeds.push(allFeeds[index]);
		} else {
			row.style.display = 'none';
		}
	});
	
	// Show/hide add button based on matches
	if (hasMatches) {
		addFeedBtn.style.display = 'none';
		document.getElementById('addFeedForm').classList.remove('with-button');
		searchResults.innerHTML = `<div class="search-info">Found ${matchingFeeds.length} matching feed${matchingFeeds.length !== 1 ? 's' : ''}</div>`;
	} else {
		addFeedBtn.style.display = 'inline-block';
		document.getElementById('addFeedForm').classList.add('with-button');
		searchResults.innerHTML = '<div class="search-info no-results">No matching feeds found. Click "Add Feed" to add this URL.</div>';
	}
});

document.getElementById('addFeedForm').addEventListener('submit', async function(e) {
	e.preventDefault();
	
	const feedUrl = document.getElementById('feedUrl').value.trim();
	if (!feedUrl) {
		return;
	}
	
	const overlay = document.getElementById('overlay');
	const spinnerStatus = document.getElementById('spinnerStatus');
	const errorMessage = document.getElementById('errorMessage');
	
	// Show overlay
	overlay.classList.add('active');
	errorMessage.style.display = 'none';
	
	try {
		// Start async feed addition
		const response = await fetch('/add-async', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded',
			},
			body: 'url=' + encodeURIComponent(feedUrl)
		});
		
		if (!response.ok) {
			throw new Error('Failed to start feed processing');
		}
		
		const data = await response.json();
		
		if (data.error) {
			throw new Error(data.error);
		}
		
		// Poll for completion
		const jobId = data.job_id;
		await pollJobStatus(jobId);
		
	} catch (error) {
		spinnerStatus.textContent = 'Error occurred';
		errorMessage.textContent = error.message;
		errorMessage.style.display = 'block';
		
		// Hide overlay after 3 seconds on error
		setTimeout(() => {
			overlay.classList.remove('active');
		}, 3000);
	}
});

async function pollJobStatus(jobId) {
	const spinnerStatus = document.getElementById('spinnerStatus');
	const overlay = document.getElementById('overlay');
	
	const poll = async () => {
		try {
			const response = await fetch(`/add-status/${jobId}`);
			if (!response.ok) {
				throw new Error('Failed to check job status');
			}
			
			const data = await response.json();
			
			if (data.status === 'completed') {
				// Redirect to results page
				window.location.href = `/add?success=true&url=${encodeURIComponent(data.url)}&npub=${encodeURIComponent(data.npub || '')}`;
			} else if (data.status === 'failed') {
				throw new Error(data.error || 'Feed processing failed');
			} else {
				// Update status and continue polling
				spinnerStatus.textContent = data.message || 'Processing feed...';
				setTimeout(poll, 1000); // Poll every second
			}
		} catch (error) {
			spinnerStatus.textContent = 'Error occurred';
			document.getElementById('errorMessage').textContent = error.message;
			document.getElementById('errorMessage').style.display = 'block';
			
			// Hide overlay after 3 seconds on error
			setTimeout(() => {
				overlay.classList.remove('active');
			}, 3000);
		}
	};
	
	await poll();
}

// Statistics modal functionality
document.getElementById('statsLink').addEventListener('click', async function(e) {
	e.preventDefault();
	
	const statsModal = document.getElementById('statsModal');
	
	// Show modal
	statsModal.classList.add('active');
	
	// Fetch statistics
	try {
		const response = await fetch('/api/stats');
		if (!response.ok) {
			throw new Error('Failed to fetch statistics');
		}
		
		const data = await response.json();
		
		// Update statistics display
		document.getElementById('totalFeeds').textContent = data.total_feeds || 0;
		document.getElementById('failingFeeds').textContent = data.failing_feeds || 0;
		document.getElementById('brokenFeeds').textContent = data.broken_feeds || 0;
		
	} catch (error) {
		console.error('Error fetching statistics:', error);
		// Show error state
		document.getElementById('totalFeeds').textContent = 'Error';
		document.getElementById('failingFeeds').textContent = 'Error';
		document.getElementById('brokenFeeds').textContent = 'Error';
	}
});

// Close statistics modal
document.getElementById('closeStatsModal').addEventListener('click', function() {
	document.getElementById('statsModal').classList.remove('active');
});

// Close modal when clicking outside
document.getElementById('statsModal').addEventListener('click', function(e) {
	if (e.target === this) {
		this.classList.remove('active');
	}
});

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
	if (e.key === 'Escape') {
		document.getElementById('statsModal').classList.remove('active');
	}
});
</script>

</body>
</html>
